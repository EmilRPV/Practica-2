#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <unistd.h> // Para getuid()

void usage(char *prog_name, char *filename) {
    printf("Usage: %s <data to add to %s>\n", prog_name, filename);
    exit(0);
}

void fatal(char *msg) {
    perror(msg);
    exit(1);
}

void *ec_malloc(unsigned int size) {
    void *ptr = malloc(size);
    if (ptr == NULL) {
        fatal("Memory allocation failed");
    }
    return ptr;
}

int main(int argc, char *argv[]) {
    int userid, fd; // File descriptor
    char *buffer, *datafile;

    // Asignar memoria para el buffer y el archivo de datos
    buffer = (char *) ec_malloc(100);
    datafile = (char *) ec_malloc(20);

    // Establecer el archivo de destino
    strcpy(datafile, "/var/notes");

    // Comprobar si se pasó un argumento en la línea de comandos
    if (argc < 2) {
        usage(argv[0], datafile);
    }

    // Copiar el texto proporcionado por el usuario en el buffer
    strcpy(buffer, argv[1]);

    // Mostrar información de depuración
    printf("[DEBUG] buffer @ %p: \'%s\'\n", buffer, buffer);
    printf("[DEBUG] datafile @ %p: \'%s\'\n", datafile, datafile);

    // Abrir el archivo en modo de escritura
    fd = open(datafile, O_WRONLY | O_CREAT | O_APPEND, S_IRUSR | S_IWUSR);
    if (fd == -1) {
        fatal("in main() while opening file");
    }
    printf("[DEBUG] file descriptor is %d\n", fd);

    // Obtener el ID de usuario real
    userid = getuid();

    // Escribir el ID de usuario en el archivo
    if (write(fd, &userid, 4) == -1) {
        fatal("in main() while writing userid to file");
    }
    write(fd, "\n", 1); // Terminar con un salto de línea

    // Escribir la nota proporcionada por el usuario
    if (write(fd, buffer, strlen(buffer)) == -1) {
        fatal("in main() while writing buffer to file");
    }
    write(fd, "\n", 1); // Terminar con un salto de línea

    // Cerrar el archivo
    if (close(fd) == -1) {
        fatal("in main() while closing file");
    }

    printf("Note has been saved.\n");

    // Liberar la memoria asignada
    free(buffer);
    free(datafile);

    return 0;
}
