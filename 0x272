#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char *argv[]) {
    char *char_ptr; // Un puntero a char
    int *int_ptr;   // Un puntero a int
    int mem_size;   // Tamaño de la memoria a asignar

    // Si no se pasa un argumento en la línea de comandos, usar 50 como tamaño por defecto
    if (argc < 2)  
        mem_size = 50;  
    else
        mem_size = atoi(argv[1]);  // Convertir el argumento a entero

    // Asignación de memoria dinámica en el heap para char_ptr
    printf("\t[+] allocating %d bytes of memory on the heap for char_ptr\n", mem_size);
    char_ptr = (char *) malloc(mem_size);  // Asignando memoria en el heap
    if(char_ptr == NULL) {  // Si malloc falla
        fprintf(stderr, "Error: could not allocate heap memory.\n");
        exit(-1);
    }

    // Copiar una cadena en la memoria asignada
    strcpy(char_ptr, "This memory is located on the heap.");
    printf("char_ptr (%p) --> '%s'\n", char_ptr, char_ptr);

    // Asignación de memoria dinámica para int_ptr
    printf("\t[+] allocating 12 bytes of memory on the heap for int_ptr\n");
    int_ptr = (int *) malloc(12);  // Asignando 12 bytes en el heap para un int
    if(int_ptr == NULL) {  // Si malloc falla
        fprintf(stderr, "Error: could not allocate heap memory.\n");
        exit(-1);
    }

    // Asignando un valor a la memoria que apunta int_ptr
    *int_ptr = 31337;  
    printf("int_ptr (%p) --> %d\n", int_ptr, *int_ptr);

    // Liberación de la memoria de char_ptr
    printf("\t[-] freeing char_ptr's heap memory...\n");
    free(char_ptr);  // Liberando la memoria asignada a char_ptr

    // Asignación de más memoria para char_ptr
    printf("\t[+] allocating another 15 bytes for char_ptr\n");
    char_ptr = (char *) malloc(15);  // Asignando 15 bytes para char_ptr
    if(char_ptr == NULL) {  // Si malloc falla
        fprintf(stderr, "Error: could not allocate heap memory.\n");
        exit(-1);
    }

    // Copiar nueva cadena en la nueva memoria
    strcpy(char_ptr, "new memory");
    printf("char_ptr (%p) --> '%s'\n", char_ptr, char_ptr);

    // Liberación de la memoria de int_ptr
    printf("\t[-] freeing int_ptr's heap memory...\n");
    free(int_ptr);  // Liberando la memoria asignada a int_ptr

    // Liberación de la memoria de char_ptr
    printf("\t[-] freeing char_ptr's heap memory...\n");
    free(char_ptr);  // Liberando la memoria asignada a char_ptr

    return 0;
}
